"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[387],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5,title:"\ud83e\uddea Testing"},i="Testing \ud83e\uddea",s={unversionedId:"basics/testing",id:"basics/testing",title:"\ud83e\uddea Testing",description:"In Dart Frog, we can effectively unit test our route handlers and middleware using packagemocktail.",source:"@site/docs/basics/testing.md",sourceDirName:"basics",slug:"/basics/testing",permalink:"/docs/basics/testing",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/testing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"\ud83e\uddea Testing"},sidebar:"docs",previous:{title:"\ud83d\udc89 Dependency Injection",permalink:"/docs/basics/dependency-injection"},next:{title:"\ud83d\udcc1 Serving Static Files",permalink:"/docs/basics/serving-static-files"}},l={},d=[{value:"Route Handlers \ud83d\ude8f",id:"route-handlers-",level:2},{value:"Basics",id:"basics",level:3},{value:"Stubbing <code>context.read&lt;T&gt;</code>",id:"stubbing-contextreadt",level:3},{value:"Middleware \ud83c\udf54",id:"middleware-",level:2},{value:"Basics",id:"basics-1",level:3}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing-"},"Testing \ud83e\uddea"),(0,r.kt)("p",null,"In Dart Frog, we can effectively unit test our route handlers and middleware using ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/test"},(0,r.kt)("inlineCode",{parentName:"a"},"package:test"))," and ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/mocktail"},(0,r.kt)("inlineCode",{parentName:"a"},"package:mocktail")),"."),(0,r.kt)("h2",{id:"route-handlers-"},"Route Handlers \ud83d\ude8f"),(0,r.kt)("p",null,"Testing route handlers is pretty straightforward and doesn't require any new concepts because a route handler is just a plain Dart function."),(0,r.kt)("h3",{id:"basics"},"Basics"),(0,r.kt)("p",null,"Let's take a look at how we can test the following route handler:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'Hello World');\n}\n")),(0,r.kt)("p",null,"In the above handler, we're simply returning a ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," response with ",(0,r.kt)("inlineCode",{parentName:"p"},"'Hello World'")," in the response body."),(0,r.kt)("p",null,"To test this, we can import our route handler, create a mock ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestContext")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:mocktail"),", and invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"onRequest")," with the mock request context to get a ",(0,r.kt)("inlineCode",{parentName:"p"},"Response"),". Then, we can assert that the response is what we expect. In this case, we're checking the ",(0,r.kt)("inlineCode",{parentName:"p"},"statusCode")," and response ",(0,r.kt)("inlineCode",{parentName:"p"},"body")," to ensure that the response is a ",(0,r.kt)("inlineCode",{parentName:"p"},"200")," and the body equals ",(0,r.kt)("inlineCode",{parentName:"p"},"'Hello World'"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/index.dart' as route;\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /', () {\n    test('responds with a 200 and greeting.', () async {\n      // Arrange\n      final context = _MockRequestContext();\n\n      // Act\n      final response = route.onRequest(context);\n\n      // Assert\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(response.body(), completion(equals('Hello World')));\n    });\n  });\n}\n")),(0,r.kt)("h3",{id:"stubbing-contextreadt"},"Stubbing ",(0,r.kt)("inlineCode",{parentName:"h3"},"context.read<T>")),(0,r.kt)("p",null,"Often times, your route handler won't be as simple. For example, it may resolve dependencies via the ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestContext")," like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n")),(0,r.kt)("p",null,"The steps to test the above route handler are the same as before. The only thing we need to add is a stub for ",(0,r.kt)("inlineCode",{parentName:"p"},"context.read"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'dart:io';\n\nimport 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/index.dart' as route;\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /', () {\n    test('responds with a 200 and greeting.', () async {\n      // Arrange\n      final greeting = 'Hello!';\n      final context = _MockRequestContext();\n      when(() => context.read<String>()).thenReturn(greeting);\n\n      // Act\n      final response = route.onRequest(context);\n\n      // Assert\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(response.body(), completion(equals(greeting)));\n    });\n  });\n}\n")),(0,r.kt)("h2",{id:"middleware-"},"Middleware \ud83c\udf54"),(0,r.kt)("p",null,"Unit testing middleware is very similar to unit testing route handlers \u2014 they are both just dart functions after all!"),(0,r.kt)("h3",{id:"basics-1"},"Basics"),(0,r.kt)("p",null,"Let's take a look at a piece of middleware that provides a greeting to the ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestContext")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"provider")," API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(provider<String>((_) => 'Hello World'));\n}\n")),(0,r.kt)("p",null,"We can unit test this piece of middleware in isolation using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:test")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"package:mocktail")," just like before."),(0,r.kt)("p",null,"To test this, we need to import our middleware, create a mock ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestContext")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:mocktail"),", apply our middleware to a dummy handler, and invoke the handler with a mock request context. Then, we can assert that the simple handler we applied the middleware to had access to the provided value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:test/test.dart';\n\nimport '../../routes/_middleware.dart';\n\nclass _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('middleware', () {\n    test('provides greeting', () async {\n      // Arrange\n      String? greeting;\n      final handler = middleware(\n        (context) {\n          greeting = context.read<String>();\n          return Response(body: '');\n        },\n      );\n      final request = Request.get(Uri.parse('http://localhost/'));\n      final context = _MockRequestContext();\n      when(() => context.request).thenReturn(request);\n\n      // Act\n      await handler(context);\n\n      // Assert\n      expect(greeting, equals('Hello World'));\n    });\n  });\n}\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We are stubbing the ",(0,r.kt)("inlineCode",{parentName:"p"},"context.read")," with a real ",(0,r.kt)("inlineCode",{parentName:"p"},"Request")," object so that the ",(0,r.kt)("inlineCode",{parentName:"p"},"provider")," is able to inject the value.")))}c.isMDXComponent=!0}}]);