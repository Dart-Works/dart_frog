"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[98],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=r.createContext({}),p=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(d.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),f=o,m=u["".concat(d,".").concat(f)]||u[f]||l[f]||a;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var c={};for(var d in n)hasOwnProperty.call(n,d)&&(c[d]=n[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7416:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={sidebar_position:3},d="Dependency Injection \ud83d\udc89",p={unversionedId:"basics/dependency-injection",id:"basics/dependency-injection",title:"Dependency Injection \ud83d\udc89",description:"Middleware can also be used to provide dependencies to a RequestContext via a provider.",source:"@site/docs/basics/dependency-injection.md",sourceDirName:"basics",slug:"/basics/dependency-injection",permalink:"/dart_frog/docs/basics/dependency-injection",draft:!1,editUrl:"https://github.com/verygoodventures/dart_frog/tree/main/docs/docs/basics/dependency-injection.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Middleware \ud83c\udf54",permalink:"/dart_frog/docs/basics/middleware"},next:{title:"Testing \ud83e\uddea",permalink:"/dart_frog/docs/basics/testing"}},s={},l=[],u={toc:l};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-injection-"},"Dependency Injection \ud83d\udc89"),(0,a.kt)("p",null,"Middleware can also be used to provide dependencies to a ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestContext")," via a ",(0,a.kt)("inlineCode",{parentName:"p"},"provider"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"provider")," is a type of middleware that can create and provide an instance of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," to the request context. The ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," callback is called lazily and the injected ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestContext")," can be used to perform additional lookups to access values provided upstream."),(0,a.kt)("p",null,"In the following example, we'll use a ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," to inject a ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," into our request context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler\n      .use(requestLogger())\n      .use(provider<String>((context) => 'Welcome to Dart Frog!'));\n}\n")),(0,a.kt)("p",null,"We can later access the provided via from within a route handler using ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read<T>()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n")))}f.isMDXComponent=!0}}]);