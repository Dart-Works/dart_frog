"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[98],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||s[m]||i;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,o[1]=d;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7416:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>s,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={sidebar_position:3,title:"\ud83d\udc89 Dependency Injection"},o="Dependency Injection \ud83d\udc89",d={unversionedId:"basics/dependency-injection",id:"basics/dependency-injection",title:"\ud83d\udc89 Dependency Injection",description:"Middleware can be used to inject dependencies into a RequestContext via a provider.",source:"@site/docs/basics/dependency-injection.md",sourceDirName:"basics",slug:"/basics/dependency-injection",permalink:"/docs/basics/dependency-injection",draft:!1,editUrl:"https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs/docs/basics/dependency-injection.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"\ud83d\udc89 Dependency Injection"},sidebar:"docs",previous:{title:"\ud83c\udf54 Middleware",permalink:"/docs/basics/middleware"},next:{title:"\ud83e\uddea Testing",permalink:"/docs/basics/testing"}},l={},c=[{value:"Provider",id:"provider",level:2},{value:"Basics",id:"basics",level:3},{value:"Extracting Providers",id:"extracting-providers",level:3},{value:"Providing Asynchronous Values",id:"providing-asynchronous-values",level:3},{value:"Lazy Initialization",id:"lazy-initialization",level:3},{value:"Caching",id:"caching",level:3}],p={toc:c};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dependency-injection-"},"Dependency Injection \ud83d\udc89"),(0,a.kt)("p",null,"Middleware can be used to inject dependencies into a ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestContext")," via a ",(0,a.kt)("inlineCode",{parentName:"p"},"provider"),"."),(0,a.kt)("h2",{id:"provider"},"Provider"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"provider")," is a type of middleware that can create and provide an instance of type ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," to the request context. The ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," callback is called lazily and the injected ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestContext")," can be used to perform additional lookups to access values provided upstream."),(0,a.kt)("h3",{id:"basics"},"Basics"),(0,a.kt)("p",null,"In the following example, we'll use a ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," to inject a ",(0,a.kt)("inlineCode",{parentName:"p"},"String")," into our request context."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(provider<String>((context) => 'Welcome to Dart Frog!'));\n}\n")),(0,a.kt)("p",null,"We can later access the provided value from within a route handler using ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read<T>()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  final greeting = context.read<String>();\n  return Response(body: greeting);\n}\n")),(0,a.kt)("h3",{id:"extracting-providers"},"Extracting Providers"),(0,a.kt)("p",null,"In the above example, we defined the ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," inline. This is fine for simple cases, but for more complex providers or providers which you want to reuse, it can be helpful to extract the provider to its own file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Middleware greetingProvider() {\n  return provider<String>((context) => 'Hello World');\n}\n")),(0,a.kt)("p",null,"Then, we can import and use the provider in one or more middleware:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Handler middleware(Handler handler) {\n  return handler.use(greetingProvider());\n}\n")),(0,a.kt)("h3",{id:"providing-asynchronous-values"},"Providing Asynchronous Values"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," can also be used to inject asynchronous values -- we just need to change the generic type to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Middleware asyncGreetingProvider() {\n  return provider<Future<String>>((context) async => 'Hello World');\n}\n")),(0,a.kt)("p",null,"We can then use the provider in one or more middleware just as before:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Handler middleware(Handler handler) {\n  return handler.use(asyncGreetingProvider());\n}\n")),(0,a.kt)("p",null,"Later, we can read the async value from a route handler via ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.read<Future<String>>();\n  return Response(body: value);\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"When accessing a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future")," via ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read")," be sure to specify the ",(0,a.kt)("inlineCode",{parentName:"p"},"Future")," as the generic type and ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," the result.")),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"You can create a custom extension if you prefer:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"extension ReadAsync on RequestContext {\n  Future<T> readAsync<T extends Object>() => read<Future<T>>();\n}\n")),(0,a.kt)("p",{parentName:"admonition"},"With the above extension, you can access the provided ",(0,a.kt)("inlineCode",{parentName:"p"},"Future")," like:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"Future<Response> onRequest(RequestContext context) async {\n  final value = await context.readAsync<String>();\n  return Response(body: value);\n}\n"))),(0,a.kt)("h3",{id:"lazy-initialization"},"Lazy Initialization"),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"provider")," creates the provided value only when it is accessed. For example, given the following middleware:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nHandler middleware(Handler handler) {\n  return handler.use(\n    provider<String>((context) {\n      // This code will never execute if `context.read<String>()` isn't called.\n      print('create!');\n      return 'Welcome to Dart Frog!';\n    }),\n  );\n}\n")),(0,a.kt)("p",null,"If we have a route handler that never invokes ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read<String>()"),", our value will never be created, and ",(0,a.kt)("inlineCode",{parentName:"p"},"create!")," will never be logged:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) => Response();\n")),(0,a.kt)("h3",{id:"caching"},"Caching"),(0,a.kt)("p",null,"By default, a provided value will be created when it is accessed. This means that each time you read a value via ",(0,a.kt)("inlineCode",{parentName:"p"},"context.read"),", the associated ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," method will be invoked."),(0,a.kt)("p",null,"As a result, you may wish to cache a provided value so that it isn't unnecessarily recreated on each read. We can do this quite easily by defining a provide value which we use to reference the provided value once it is created."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"String? _greeting;\n\nMiddleware cachedGreetingProvider() {\n  return provider<String>((context) => _greeting ??= 'Hello World');\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The cached ",(0,a.kt)("inlineCode",{parentName:"p"},"_greeting")," is private so that it can only be accessed within the context of this provider.")),(0,a.kt)("p",null,"This pattern can also be applied to async providers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"String? _greeting;\n\nMiddleware cachedAsyncGreetingProvider() {\n  return provider<Future<String>>((context) async => _greeting ??= 'Hello World');\n}\n")),(0,a.kt)("p",null,"With the above implementations, the greeting will only be computed once and the cached value will be used for the duration of the application lifecycle."))}s.isMDXComponent=!0}}]);