"use strict";(self.webpackChunkdart_frog_docs=self.webpackChunkdart_frog_docs||[]).push([[179],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,s(s({ref:t},d),{},{components:n})):r.createElement(f,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3800:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={sidebar_position:1},p="Routes \ud83d\ude8f",l={unversionedId:"basics/routes",id:"basics/routes",title:"Routes \ud83d\ude8f",description:"In Dart Frog, a route consists of an onRequest function (called a route handler) exported from a .dart file in the routes directory. Each endpoint is associated with a routes file based on its file name. Files named, index.dart will correspond to a / endpoint.",source:"@site/docs/basics/routes.md",sourceDirName:"basics",slug:"/basics/routes",permalink:"/dart_frog/docs/basics/routes",draft:!1,editUrl:"https://github.com/verygoodventures/dart_frog/tree/main/docs/docs/basics/routes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Basics \ud83d\udcda",permalink:"/dart_frog/docs/category/basics-"},next:{title:"Middleware \ud83c\udf54",permalink:"/dart_frog/docs/basics/middleware"}},d={},c=[{value:"Dynamic Routes \ud83c\udf13",id:"dynamic-routes-",level:2}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"routes-"},"Routes \ud83d\ude8f"),(0,o.kt)("p",null,"In Dart Frog, a route consists of an ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequest")," function (called a route handler) exported from a ",(0,o.kt)("inlineCode",{parentName:"p"},".dart")," file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," directory. Each endpoint is associated with a routes file based on its file name. Files named, ",(0,o.kt)("inlineCode",{parentName:"p"},"index.dart")," will correspond to a ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," endpoint."),(0,o.kt)("p",null,"For example, if you create ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/hello.dart")," that exports an ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequest")," method like below, it will be accessible at ",(0,o.kt)("inlineCode",{parentName:"p"},"/hello"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(body: 'Hello World');\n}\n")),(0,o.kt)("p",null,"All route handlers have access to a ",(0,o.kt)("inlineCode",{parentName:"p"},"RequestContext")," which can be used to access the incoming request as well as dependencies provided to the request context (see middleware)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  // Access the incoming request.\n  final request = context.request;\n\n  // Return a response.\n  return Response(body: 'Hello World');\n}\n")),(0,o.kt)("p",null,"We can customize the status code of the response via the ",(0,o.kt)("inlineCode",{parentName:"p"},"statusCode")," parameter on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response(statusCode: 204);\n}\n")),(0,o.kt)("p",null,"In addition, we can return JSON via the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response.json")," constructor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response.json(\n    body: <String, dynamic>{'hello': 'world!'},\n  );\n}\n")),(0,o.kt)("p",null,"We can also return any Dart object in the ",(0,o.kt)("inlineCode",{parentName:"p"},"body")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Response.json")," constructor and it will be serialized correctly as long as it has a ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," method that returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Check out ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/json_serializable"},"json_serializable")," to automate the ",(0,o.kt)("inlineCode",{parentName:"p"},"toJson")," generation.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:json_annotation/json_annotation.dart';\n\npart 'user.g.dart';\n\n@JsonSerializable()\nclass User {\n  const User({required this.name, required this.age});\n\n  final String name;\n  final int age;\n\n  Map<String, dynamic> toJson() => _$UserToJson(this);\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context) {\n  return Response.json(\n    body: User(name: 'Dash', age: 42),\n  );\n}\n")),(0,o.kt)("p",null,"Route handlers can be synchronous or asynchronous. To convert the above route handlers to async, we just need to update the return type from ",(0,o.kt)("inlineCode",{parentName:"p"},"Response")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Future<Response>"),". We can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," keyword in order to ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," futures within our handler before returning a ",(0,o.kt)("inlineCode",{parentName:"p"},"Response"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nFuture<Response> onRequest(RequestContext context) async {\n  final result = await _someFuture();\n  return Response(body: 'Result is: $result!');\n}\n")),(0,o.kt)("h2",{id:"dynamic-routes-"},"Dynamic Routes \ud83c\udf13"),(0,o.kt)("p",null,"Dart Frog supports dynamic routes. For example, if you create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"routes/posts/[id].dart"),", then it will be accessible at ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts/1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts/2"),", etc."),(0,o.kt)("p",null,"Routing parameters are forwarded to the ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequest")," method as seen below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:dart_frog/dart_frog.dart';\n\nResponse onRequest(RequestContext context, String id) {\n  return Response(body: 'post id: $id');\n}\n")))}m.isMDXComponent=!0}}]);